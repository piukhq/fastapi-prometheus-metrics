[tool.poetry]
name = "fastapi-prometheus-metrics"
version = "0.0.0"
description = "utilities for reporting prometheus metrics for incoming http requests"
authors = ["Bink <bink@bink.bink>"]
packages = [
    { include = "fastapi_prometheus_metrics" },
]
[tool.poetry.dependencies]
python = "^3.10"
blinker = "<1.8"
fastapi = "^0.110.0"
prometheus-client = "^0.20.0"
sentry-sdk = "^1.39.1"

[tool.poetry.group.dev.dependencies]
black = "^23.12.0"
isort = "^5.13.2"
xenon = "^0.9.1"
mypy = "^1.7.1"
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.23.2"
httpx = "^0.27.0"
ruff = "^0.4.0"
refurb = "^1.27.0"

[tool.poetry-dynamic-versioning]
enable = true

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.black]
line-length = 120

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120
skip_gitignore = false
lines_between_types = 1

[tool.mypy]
disallow_untyped_defs = true
show_error_codes = true
warn_unused_ignores = true
ignore_missing_imports = true
disallow_incomplete_defs = true
warn_redundant_casts = true
exclude = "alembic/versions/"
plugins = [
    "pydantic.mypy",
]

[tool.ruff]
line-length = 120
show-source = true
target-version = "py311"
select = [
    "F",    # Pyflakes (F)
    "E",
    "W",    # pycodestyle (E, W)
    "C90",  # mccabe (C90)
    # isort (I)
    # pydocstyle (D)
    "UP",   # pyupgrade (UP)
    "N",    # pep8-naming (N)
    "YTT",  # flake8-2020 (YTT)
    "ANN",  # flake8-annotations (ANN)
    "S",    # flake8-bandit (S)
    "BLE",  # flake8-blind-except (BLE)
    # flake8-boolean-trap (FBT)
    "B",    # flake8-bugbear (B)
    "A",    # flake8-builtins (A)
    "C4",   # flake8-comprehensions (C4)
    "T10",  # flake8-debugger (T10)
    # flake8-errmsg (EM)
    "ICN",  # flake8-import-conventions (ICN)
    "T20",  # flake8-print (T20)
    # "PT",   # flake8-pytest-style (PT)
    "Q",    # flake8-quotes (Q)
    # flake8-return (RET)
    "SIM",  # flake8-simplify (SIM)
    "TID",  # flake8-tidy-imports (TID)
    "ARG",  # flake8-unused-arguments (ARG)
    "DTZ",  # flake8-datetimez (DTZ)
    "ERA",  # eradicate (ERA) until we can remove commented out code this has to stay deactivated
    # pandas-vet (PD)
    # pygrep-hooks (PGH)
    "PLC",
    "PLE",
    "PLR",
    "PLW",  # Pylint (PLC, PLE, PLR, PLW)
    "RUF",  # Ruff-specific rules (RUF)
]
ignore = [
    "ANN101",
    "ANN102",
    # disables function call in function parameter error
    # arg = typer.Option(..) would be flagged
    "B008",
    "PLR2004",
    "PLR0913",
    "ARG002",
]

[tool.ruff.per-file-ignores]
# disable unused import error for __init__.py and cosmos/db/base.py
"tests/*" = ["S101", "PLR2004", "ARG001", "PLR0913", "PLR0915", "ARG002", "N801"]

[tool.refurb]
ignore = [
    "FURB184",  # some chaining suggestions don't make sense
]
